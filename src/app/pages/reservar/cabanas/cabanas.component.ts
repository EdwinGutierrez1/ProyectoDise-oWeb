// cabanas.component.ts - COMPLETO CON TODAS LAS FUNCIONALIDADES
import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subscription } from 'rxjs';
import { CotizacionService, CabanaSeleccionada } from '../cotizacion.service';

@Component({
  selector: 'app-cabanas',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './cabanas.component.html',
  styleUrls: ['./cabanas.component.css']
})
export class CabanasComponent implements OnInit, OnDestroy {
  selectedCabana: number | null = null;
  cantidadPersonas: number = 0;
  
  // Variables para el modal
  modalAbierto: boolean = false;
  cabanaModalActual: number | null = null;
  imagenActualIndex: number = 0;
  
  // Suscripci√≥n para cleanup
  private subscription: Subscription = new Subscription();

  // Precios base por tipo de caba√±a
  private preciosBase = {
    1: 150000, // Caba√±a #1 - 2 personas (1 pareja)
    2: 300000, // Caba√±a #2 - 3-4 personas (precio base)
    3: 500000  // Caba√±a #3 - 6-8 personas (precio base)
  };

  // Rangos de personas por caba√±a
  private rangosPersonas = {
    1: { min: 2, max: 2 }, // Caba√±a #1: exactamente 2 personas (1 pareja)
    2: { min: 3, max: 6 }, // Caba√±a #2: 3-6 personas
    3: { min: 6, max: 10 } // Caba√±a #3: 6-10 personas
  };

  // Im√°genes por caba√±a
  private imagenesCabanas = {
    1: [
      '/caba√±apeque√±a1.jpg',
      '/caba√±apeque√±a2.jpg',
      '/caba√±apeque√±a3.jpg',
      '/caba√±apeque√±a5.jpg'
    ],
    2: [
      '/caba√±amediana1.jpg',
      '/caba√±amediana2.jpg',
      '/caba√±amediana3.jpg',
      '/caba√±amediana4.jpg',
      '/caba√±amediana5.jpg'
    ],
    3: [
      '/caba√±agrande1.jpg',
      '/caba√±agrande2.jpg',
      '/caba√±agrande3.jpg',
      '/caba√±agrande4.jpg',
      '/caba√±agrande5.jpg'
    ]
  };

  // Informaci√≥n detallada de cada caba√±a
  private informacionCabanas = {
    1: {
      nombre: 'Caba√±a Rom√°ntica',
      capacidad: 'Pareja (2 personas)',
      descripcion: 'Perfecta para escapadas rom√°nticas. Cuenta con cama king size, jacuzzi privado, chimenea y vista panor√°mica. Ideal para celebrar aniversarios o lunas de miel.'
    },
    2: {
      nombre: 'Caba√±a Familiar',
      capacidad: '3-6 personas',
      descripcion: 'Espaciosa caba√±a ideal para familias. Incluye 3 habitaciones, sala de estar, cocina equipada, terraza con parrilla y √°rea de juegos para ni√±os.'
    },
    3: {
      nombre: 'Caba√±a Grupal',
      capacidad: '6-10 personas',
      descripcion: 'La caba√±a m√°s grande, perfecta para grupos y reuniones. Cuenta con 5 habitaciones, 3 ba√±os, amplia sala, cocina completa, terraza grande y √°rea de fogata.'
    }
  };

  // Caracter√≠sticas de cada caba√±a (habitaciones y ba√±os) - L√ìGICA COHERENTE
  private caracteristicasCabanas = {
    1: {
      habitaciones: 1,
      banos: 1
    },
    2: {
      habitaciones: 3,
      banos: 2
    },
    3: {
      habitaciones: 5,
      banos: 3
    }
  };

  private amenidadesCabanas = {
    1: {
      emoji: 'üõÅ',
      texto: 'Jacuzzi'
    },
    2: {
      emoji: 'üèä‚Äç‚ôÄÔ∏è',
      texto: 'Piscina'
    },
    3: {
      emoji: 'üõÅ',
      texto: 'Jacuzzi'
    }
  };

  constructor(private cotizacionService: CotizacionService) {}

  ngOnInit(): void {
    // Suscribirse a cambios en la cotizaci√≥n para mantener sincronizaci√≥n
    this.subscription.add(
      this.cotizacionService.cotizacion$.subscribe(cotizacion => {
        if (cotizacion.cabana) {
          this.selectedCabana = cotizacion.cabana.id;
          this.cantidadPersonas = cotizacion.cantidadPersonas;
        }
      })
    );
  }

  ngOnDestroy(): void {
    this.subscription.unsubscribe();
  }

  // M√âTODOS DEL MODAL

  /**
   * Abre el modal de galer√≠a para una caba√±a espec√≠fica
   * @param cabanaId - ID de la caba√±a (1, 2 o 3)
   */
  abrirModal(cabanaId: number): void {
    this.cabanaModalActual = cabanaId;
    this.imagenActualIndex = 0;
    this.modalAbierto = true;
    // Prevenir scroll del body cuando el modal est√° abierto
    document.body.style.overflow = 'hidden';
  }

  /**
   * Cierra el modal de galer√≠a
   */
  cerrarModal(): void {
    this.modalAbierto = false;
    this.cabanaModalActual = null;
    this.imagenActualIndex = 0;
    // Restaurar scroll del body
    document.body.style.overflow = 'auto';
  }

  /**
   * Navega a la imagen anterior en la galer√≠a
   */
  imagenAnterior(): void {
    if (this.imagenActualIndex > 0) {
      this.imagenActualIndex--;
    }
  }

  /**
   * Navega a la imagen siguiente en la galer√≠a
   */
  imagenSiguiente(): void {
    const imagenes = this.getImagenesCabana();
    if (this.imagenActualIndex < imagenes.length - 1) {
      this.imagenActualIndex++;
    }
  }

  /**
   * Navega directamente a una imagen espec√≠fica
   * @param index - √çndice de la imagen
   */
  irAImagen(index: number): void {
    const imagenes = this.getImagenesCabana();
    if (index >= 0 && index < imagenes.length) {
      this.imagenActualIndex = index;
    }
  }

  /**
   * Obtiene la URL de la imagen actual
   * @returns URL de la imagen actual
   */
  getImagenActual(): string {
    const imagenes = this.getImagenesCabana();
    return imagenes[this.imagenActualIndex] || '';
  }

    /**
   * Obtiene la amenidad especial de la caba√±a actual del modal
   * @returns Objeto con emoji y texto de la amenidad, o null si no tiene
   */
  getAmenidadCabana(): { emoji: string; texto: string } | null {
    if (!this.cabanaModalActual || !this.amenidadesCabanas[this.cabanaModalActual as keyof typeof this.amenidadesCabanas]) {
      return null;
    }
    return this.amenidadesCabanas[this.cabanaModalActual as keyof typeof this.amenidadesCabanas];
  }

  /**
   * Obtiene el array de im√°genes de la caba√±a actual del modal
   * @returns Array de URLs de im√°genes
   */
  getImagenesCabana(): string[] {
    if (!this.cabanaModalActual) return [];
    return this.imagenesCabanas[this.cabanaModalActual as keyof typeof this.imagenesCabanas] || [];
  }

  /**
   * Obtiene el nombre de la caba√±a actual del modal
   * @returns Nombre de la caba√±a
   */
  getNombreCabana(): string {
    if (!this.cabanaModalActual) return '';
    return this.informacionCabanas[this.cabanaModalActual as keyof typeof this.informacionCabanas]?.nombre || '';
  }

  /**
   * Obtiene la capacidad de la caba√±a actual del modal
   * @returns Capacidad de la caba√±a
   */
  getCapacidadCabana(): string {
    if (!this.cabanaModalActual) return '';
    return this.informacionCabanas[this.cabanaModalActual as keyof typeof this.informacionCabanas]?.capacidad || '';
  }

  /**
   * Obtiene la descripci√≥n de la caba√±a actual del modal
   * @returns Descripci√≥n de la caba√±a
   */
  getDescripcionCabana(): string {
    if (!this.cabanaModalActual) return '';
    return this.informacionCabanas[this.cabanaModalActual as keyof typeof this.informacionCabanas]?.descripcion || '';
  }

  /**
   * Obtiene el n√∫mero de habitaciones de la caba√±a actual del modal
   * @returns N√∫mero de habitaciones
   */
  getHabitacionesCabana(): number {
    if (!this.cabanaModalActual || !this.caracteristicasCabanas[this.cabanaModalActual as keyof typeof this.caracteristicasCabanas]) {
      return 0;
    }
    return this.caracteristicasCabanas[this.cabanaModalActual as keyof typeof this.caracteristicasCabanas].habitaciones;
  }

  /**
   * Obtiene el n√∫mero de ba√±os de la caba√±a actual del modal
   * @returns N√∫mero de ba√±os
   */
  getBanosCabana(): number {
    if (!this.cabanaModalActual || !this.caracteristicasCabanas[this.cabanaModalActual as keyof typeof this.caracteristicasCabanas]) {
      return 0;
    }
    return this.caracteristicasCabanas[this.cabanaModalActual as keyof typeof this.caracteristicasCabanas].banos;
  }

  /**
   * Elige la caba√±a actual del modal y cierra el modal
   */
  elegirCabana(): void {
    if (this.cabanaModalActual) {
      this.selectCabana(this.cabanaModalActual);
      this.cerrarModal();
    }
  }

  // M√âTODOS ORIGINALES DEL COMPONENTE

  /**
   * Selecciona una caba√±a y ajusta la cantidad de personas seg√∫n el rango
   * @param cabanaId - ID de la caba√±a (1, 2 o 3)
   */
  selectCabana(cabanaId: number): void {
    this.selectedCabana = cabanaId;
    
    // Establecer la cantidad m√≠nima de personas seg√∫n la caba√±a
    const rango = this.rangosPersonas[cabanaId as keyof typeof this.rangosPersonas];
    this.cantidadPersonas = rango.min;
    
    // Actualizar el servicio de cotizaci√≥n
    this.actualizarCotizacion();
    
    console.log(`Caba√±a seleccionada: ${cabanaId}, Personas: ${this.cantidadPersonas}`);
  }

  /**
   * Incrementa la cantidad de personas respetando el l√≠mite de la caba√±a
   */
  incrementarPersonas(): void {
    if (this.selectedCabana && this.canIncrement()) {
      this.cantidadPersonas++;
      this.actualizarCotizacion();
    }
  }

  /**
   * Decrementa la cantidad de personas respetando el m√≠nimo de la caba√±a
   */
  decrementarPersonas(): void {
    if (this.selectedCabana && this.canDecrement()) {
      this.cantidadPersonas--;
      this.actualizarCotizacion();
    }
  }

  /**
   * Actualiza la cotizaci√≥n en el servicio
   */
  private actualizarCotizacion(): void {
    if (!this.selectedCabana) return;

    const capacidades = {
      1: '1 Pareja',
      2: '3-6 personas',
      3: '6-10 personas'
    };

    const cabanaData: CabanaSeleccionada = {
      id: this.selectedCabana,
      precio: this.getPrecio(),
      capacidad: capacidades[this.selectedCabana as keyof typeof capacidades],
      personas: this.cantidadPersonas
    };

    this.cotizacionService.actualizarCabana(cabanaData, this.cantidadPersonas);
  }

  /**
   * Obtiene el precio de la caba√±a seleccionada con l√≥gica variable
   * @returns Precio de la caba√±a seleccionada seg√∫n cantidad de personas
   */
  getPrecio(): number {
    if (!this.selectedCabana || !this.preciosBase[this.selectedCabana as keyof typeof this.preciosBase]) {
      return 0;
    }

    const precioBase = this.preciosBase[this.selectedCabana as keyof typeof this.preciosBase];

    // L√≥gica de precios variables seg√∫n cantidad de personas
    switch (this.selectedCabana) {
      case 1:
        // Caba√±a #1: precio fijo
        return precioBase;
      
      case 2:
        // Caba√±a #2: 
        // - 3-4 personas: precio base (300,000)
        // - 5-6 personas: 350,000
        if (this.cantidadPersonas >= 5 && this.cantidadPersonas <= 6) {
          return 350000;
        }
        return precioBase;
      
      case 3:
        // Caba√±a #3:
        // - 6-8 personas: precio base (500,000)
        // - 9-10 personas: 600,000
        if (this.cantidadPersonas >= 9 && this.cantidadPersonas <= 10) {
          return 600000;
        }
        return precioBase;
      
      default:
        return precioBase;
    }
  }

  /**
   * Verifica si una caba√±a est√° seleccionada
   * @param cabanaId - ID de la caba√±a
   * @returns true si la caba√±a est√° seleccionada
   */
  isCabanaSelected(cabanaId: number): boolean {
    return this.selectedCabana === cabanaId;
  }

  /**
   * Verifica si el contador puede incrementar seg√∫n el rango de la caba√±a
   * @returns true si se puede incrementar
   */
  canIncrement(): boolean {
    if (!this.selectedCabana) return false;
    
    const rango = this.rangosPersonas[this.selectedCabana as keyof typeof this.rangosPersonas];
    return this.cantidadPersonas < rango.max;
  }

  /**
   * Verifica si el contador puede decrementar seg√∫n el rango de la caba√±a
   * @returns true si se puede decrementar
   */
  canDecrement(): boolean {
    if (!this.selectedCabana) return false;
    
    const rango = this.rangosPersonas[this.selectedCabana as keyof typeof this.rangosPersonas];
    return this.cantidadPersonas > rango.min;
  }

  /**
   * Verifica si la caba√±a seleccionada tiene contador fijo (caba√±a 1)
   * @returns true si es la caba√±a 1 (contador deshabilitado)
   */
  isContadorFijo(): boolean {
    return this.selectedCabana === 1;
  }

  /**
   * Obtiene informaci√≥n completa de la reserva
   * @returns Objeto con informaci√≥n de la caba√±a y personas
   */
  getReservaInfo(): { 
    cabana: number; 
    precio: number; 
    capacidad: string; 
    personas: number;
    isValid: boolean;
  } | null {
    if (!this.selectedCabana) return null;

    const capacidades = {
      1: '1 Pareja',
      2: '3-6 personas',
      3: '6-10 personas'
    };

    const rango = this.rangosPersonas[this.selectedCabana as keyof typeof this.rangosPersonas];

    return {
      cabana: this.selectedCabana,
      precio: this.getPrecio(),
      capacidad: capacidades[this.selectedCabana as keyof typeof capacidades],
      personas: this.cantidadPersonas,
      isValid: this.cantidadPersonas >= rango.min && this.cantidadPersonas <= rango.max
    };
  }

  /**
   * Verifica si la reserva est√° completa y v√°lida
   * @returns true si se puede proceder con la reserva
   */
  isReservaValida(): boolean {
    const reserva = this.getReservaInfo();
    return reserva?.isValid || false;
  }

  /**
   * Obtiene informaci√≥n de la caba√±a seleccionada
   * @returns Objeto con informaci√≥n de la caba√±a
   */
  getSelectedCabanaInfo(): { id: number; precio: number; capacidad: string } | null {
    if (!this.selectedCabana) return null;

    const capacidades = {
      1: '1 Pareja',
      2: '3-6 personas',
      3: '6-10 personas'
    };

    return {
      id: this.selectedCabana,
      precio: this.getPrecio(),
      capacidad: capacidades[this.selectedCabana as keyof typeof capacidades]
    };
  }

  /**
   * Obtiene el rango de personas para la caba√±a seleccionada
   * @returns Objeto con min y max de personas
   */
  getRangoPersonas(): { min: number; max: number } | null {
    if (!this.selectedCabana) return null;
    return this.rangosPersonas[this.selectedCabana as keyof typeof this.rangosPersonas];
  }

  /**
   * Obtiene informaci√≥n de precios seg√∫n la cantidad de personas
   * @returns String con informaci√≥n de precios
   */
  getPrecioInfo(): string {
    if (!this.selectedCabana) return '';

    switch (this.selectedCabana) {
      case 1:
        return 'Precio fijo para pareja';
      case 2:
        return this.cantidadPersonas >= 5 ? 
          'Precio para 5-6 personas' : 
          'Precio para 3-4 personas';
      case 3:
        return this.cantidadPersonas >= 9 ? 
          'Precio para 9-10 personas' : 
          'Precio para 6-8 personas';
      default:
        return '';
    }
  }
}